{"ast":null,"code":"import axios from 'axios';\nimport { some } from 'lodash';\nimport TokenFreeApis from './TokenFreeApi';\nimport API from \"./Api\";\nimport PrevApi from \"./PrevApi\";\n/**\n * make custom axios request.\n */\n\nconst timeout = 20000;\nconst http = axios.create({\n  timeout: timeout\n});\n\nconst redirectUnAuth = response => {\n  if (response.status == 401) {\n    window.location.href = '/';\n  }\n};\n\nconst isTokenNeeded = url => {\n  return !some(TokenFreeApis, tokenFreeURL => {\n    return tokenFreeURL === url;\n  });\n};\n\nconst isBasicAuthorizationNeeded = url => {\n  //return some(PrevApi,_.includes(url));\n  return !some(PrevApi, tokenFreeURL => {\n    return url.includes(tokenFreeURL);\n  });\n};\n/**\n * Interceptor for api request.\n */\n\n\nhttp.interceptors.request.use(request => {\n  // GET Token and add token to request if any api needed.\n  // if (isTokenNeeded(request.url)) {\n  //     request.headers.authToken = localStorage.getItem('acessToken')\n  // }\n  if (isBasicAuthorizationNeeded(request.url)) {\n    request.headers.Authorization = API.AUTH;\n  }\n\n  return request;\n}, error => Promise.reject(error));\n/**\n * Interceptor for api response.\n */\n\nhttp.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response) {\n    redirectUnAuth(error.response);\n    return Promise.reject(error.response.data);\n  }\n\n  if (error.message === 'Network Error') {\n    // network error\n    const networkError = {\n      errorCodeList: ['NETWORK']\n    };\n    return Promise.reject(networkError);\n  } else if (error.message === \"timeout of \".concat(timeout, \"ms exceeded\")) {\n    // timeout error\n    const timeoutError = {\n      errorCodeList: ['TIMEOUT']\n    };\n    return Promise.reject(timeoutError);\n  }\n\n  return Promise.reject(error);\n});\nexport default http;","map":{"version":3,"sources":["/Users/ajeetjai/Desktop/website/src/config/Interceptor.js"],"names":["axios","some","TokenFreeApis","API","PrevApi","timeout","http","create","redirectUnAuth","response","status","window","location","href","isTokenNeeded","url","tokenFreeURL","isBasicAuthorizationNeeded","includes","interceptors","request","use","headers","Authorization","AUTH","error","Promise","reject","data","message","networkError","errorCodeList","timeoutError"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA;;;;AAIA,MAAMC,OAAO,GAAG,KAAhB;AAEA,MAAMC,IAAI,GAAGN,KAAK,CAACO,MAAN,CAAa;AACtBF,EAAAA,OAAO,EAAEA;AADa,CAAb,CAAb;;AAIA,MAAMG,cAAc,GAAIC,QAAD,IAAc;AACjC,MAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AACxBC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACH;AACJ,CAJD;;AAMA,MAAMC,aAAa,GAAIC,GAAD,IAAS;AAC3B,SAAO,CAACd,IAAI,CAACC,aAAD,EAAiBc,YAAD,IAAkB;AAC1C,WAAOA,YAAY,KAAKD,GAAxB;AACH,GAFW,CAAZ;AAGH,CAJD;;AAMA,MAAME,0BAA0B,GAAIF,GAAD,IAAS;AACxC;AACA,SAAO,CAACd,IAAI,CAACG,OAAD,EAAWY,YAAD,IAAkB;AACpC,WAAOD,GAAG,CAACG,QAAJ,CAAaF,YAAb,CAAP;AACH,GAFW,CAAZ;AAGH,CALD;AAQA;;;;;AAIAV,IAAI,CAACa,YAAL,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA+BD,OAAD,IAAa;AACvC;AACA;AACA;AACA;AACA,MAAIH,0BAA0B,CAACG,OAAO,CAACL,GAAT,CAA9B,EAA6C;AACzCK,IAAAA,OAAO,CAACE,OAAR,CAAgBC,aAAhB,GAAgCpB,GAAG,CAACqB,IAApC;AACH;;AAED,SAAOJ,OAAP;AACH,CAVD,EAUGK,KAAK,IAAIC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAVZ;AAYA;;;;AAGAnB,IAAI,CAACa,YAAL,CAAkBV,QAAlB,CAA2BY,GAA3B,CAAgCZ,QAAD,IAAc;AACzC,SAAOA,QAAP;AACH,CAFD,EAEIgB,KAAD,IAAW;AACV,MAAIA,KAAK,CAAChB,QAAV,EAAoB;AAChBD,IAAAA,cAAc,CAACiB,KAAK,CAAChB,QAAP,CAAd;AACA,WAAOiB,OAAO,CAACC,MAAR,CAAeF,KAAK,CAAChB,QAAN,CAAemB,IAA9B,CAAP;AACH;;AACD,MAAIH,KAAK,CAACI,OAAN,KAAkB,eAAtB,EAAuC;AACnC;AACA,UAAMC,YAAY,GAAG;AACjBC,MAAAA,aAAa,EAAE,CAAC,SAAD;AADE,KAArB;AAGA,WAAOL,OAAO,CAACC,MAAR,CAAeG,YAAf,CAAP;AACH,GAND,MAMO,IAAIL,KAAK,CAACI,OAAN,0BAAgCxB,OAAhC,gBAAJ,EAA0D;AAC7D;AACA,UAAM2B,YAAY,GAAG;AACjBD,MAAAA,aAAa,EAAE,CAAC,SAAD;AADE,KAArB;AAGA,WAAOL,OAAO,CAACC,MAAR,CAAeK,YAAf,CAAP;AACH;;AACD,SAAON,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CArBD;AAuBA,eAAenB,IAAf","sourcesContent":["import axios from 'axios';\nimport { some } from 'lodash';\nimport TokenFreeApis from './TokenFreeApi';\nimport API from \"./Api\";\nimport PrevApi from \"./PrevApi\";\n\n/**\n * make custom axios request.\n */\n\nconst timeout = 20000;\n\nconst http = axios.create({\n    timeout: timeout\n});\n\nconst redirectUnAuth = (response) => {\n    if (response.status == 401) {\n        window.location.href = '/';\n    }\n}\n\nconst isTokenNeeded = (url) => {\n    return !some(TokenFreeApis, (tokenFreeURL) => {\n        return tokenFreeURL === url;\n    })\n}\n\nconst isBasicAuthorizationNeeded = (url) => {\n    //return some(PrevApi,_.includes(url));\n    return !some(PrevApi, (tokenFreeURL) => {\n        return url.includes(tokenFreeURL);\n    })\n}\n\n\n/**\n * Interceptor for api request.\n */\n\nhttp.interceptors.request.use((request) => {\n    // GET Token and add token to request if any api needed.\n    // if (isTokenNeeded(request.url)) {\n    //     request.headers.authToken = localStorage.getItem('acessToken')\n    // }\n    if (isBasicAuthorizationNeeded(request.url)) {\n        request.headers.Authorization = API.AUTH;\n    }\n\n    return request;\n}, error => Promise.reject(error));\n\n/**\n * Interceptor for api response.\n */\nhttp.interceptors.response.use((response) => {\n    return response;\n}, (error) => {\n    if (error.response) {\n        redirectUnAuth(error.response);\n        return Promise.reject(error.response.data);\n    }\n    if (error.message === 'Network Error') {\n        // network error\n        const networkError = {\n            errorCodeList: ['NETWORK'],\n        };\n        return Promise.reject(networkError);\n    } else if (error.message === `timeout of ${timeout}ms exceeded`) {\n        // timeout error\n        const timeoutError = {\n            errorCodeList: ['TIMEOUT'],\n        };\n        return Promise.reject(timeoutError);\n    }\n    return Promise.reject(error);\n});\n\nexport default http;\n"]},"metadata":{},"sourceType":"module"}